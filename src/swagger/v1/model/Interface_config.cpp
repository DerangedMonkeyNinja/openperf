/**
* OpenPerf API
* REST API interface for OpenPerf
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "Interface_config.h"

namespace swagger {
namespace v1 {
namespace model {

Interface_config::Interface_config()
{
    m_Rx_filter = "";
    m_Rx_filterIsSet = false;
    m_Tx_filter = "";
    m_Tx_filterIsSet = false;
    
}

Interface_config::~Interface_config()
{
}

void Interface_config::validate()
{
    // TODO: implement validation
}

nlohmann::json Interface_config::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Protocols )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["protocols"] = jsonArray;
            }
    if(m_Rx_filterIsSet)
    {
        val["rx_filter"] = ModelBase::toJson(m_Rx_filter);
    }
    if(m_Tx_filterIsSet)
    {
        val["tx_filter"] = ModelBase::toJson(m_Tx_filter);
    }
    

    return val;
}

void Interface_config::fromJson(nlohmann::json& val)
{
    {
        m_Protocols.clear();
        nlohmann::json jsonArray;
                for( auto& item : val["protocols"] )
        {
            
            if(item.is_null())
            {
                m_Protocols.push_back( std::shared_ptr<InterfaceProtocolConfig>(nullptr) );
            }
            else
            {
                std::shared_ptr<InterfaceProtocolConfig> newItem(new InterfaceProtocolConfig());
                newItem->fromJson(item);
                m_Protocols.push_back( newItem );
            }
            
        }
    }
    if(val.find("rx_filter") != val.end())
    {
        setRxFilter(val.at("rx_filter"));
        
    }
    if(val.find("tx_filter") != val.end())
    {
        setTxFilter(val.at("tx_filter"));
        
    }
    
}


std::vector<std::shared_ptr<InterfaceProtocolConfig>>& Interface_config::getProtocols()
{
    return m_Protocols;
}
std::string Interface_config::getRxFilter() const
{
    return m_Rx_filter;
}
void Interface_config::setRxFilter(std::string value)
{
    m_Rx_filter = value;
    m_Rx_filterIsSet = true;
}
bool Interface_config::rxFilterIsSet() const
{
    return m_Rx_filterIsSet;
}
void Interface_config::unsetRx_filter()
{
    m_Rx_filterIsSet = false;
}
std::string Interface_config::getTxFilter() const
{
    return m_Tx_filter;
}
void Interface_config::setTxFilter(std::string value)
{
    m_Tx_filter = value;
    m_Tx_filterIsSet = true;
}
bool Interface_config::txFilterIsSet() const
{
    return m_Tx_filterIsSet;
}
void Interface_config::unsetTx_filter()
{
    m_Tx_filterIsSet = false;
}

}
}
}

