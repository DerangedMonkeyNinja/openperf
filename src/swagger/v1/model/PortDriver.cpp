/**
* Inception Core API
* REST API interface to the Inception Core
*
* OpenAPI spec version: 1
* Contact: support@spirent.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "PortDriver.h"

namespace swagger {
namespace v1 {
namespace model {

PortDriver::PortDriver()
{
    m_DpdkIsSet = false;
    m_HostIsSet = false;
    m_BondIsSet = false;
    
}

PortDriver::~PortDriver()
{
}

void PortDriver::validate()
{
    // TODO: implement validation
}

nlohmann::json PortDriver::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DpdkIsSet)
    {
        val["dpdk"] = ModelBase::toJson(m_Dpdk);
    }
    if(m_HostIsSet)
    {
        val["host"] = ModelBase::toJson(m_Host);
    }
    if(m_BondIsSet)
    {
        val["bond"] = ModelBase::toJson(m_Bond);
    }
    

    return val;
}

void PortDriver::fromJson(nlohmann::json& val)
{
    if(val.find("dpdk") != val.end())
    {
        if(!val["dpdk"].is_null())
        {
            std::shared_ptr<PortDriver_dpdk> newItem(new PortDriver_dpdk());
            newItem->fromJson(val["dpdk"]);
            setDpdk( newItem );
        }
        
    }
    if(val.find("host") != val.end())
    {
        if(!val["host"].is_null())
        {
            std::shared_ptr<PortDriver_host> newItem(new PortDriver_host());
            newItem->fromJson(val["host"]);
            setHost( newItem );
        }
        
    }
    if(val.find("bond") != val.end())
    {
        if(!val["bond"].is_null())
        {
            std::shared_ptr<PortDriver_bond> newItem(new PortDriver_bond());
            newItem->fromJson(val["bond"]);
            setBond( newItem );
        }
        
    }
    
}


std::shared_ptr<PortDriver_dpdk> PortDriver::getDpdk() const
{
    return m_Dpdk;
}
void PortDriver::setDpdk(std::shared_ptr<PortDriver_dpdk> value)
{
    m_Dpdk = value;
    m_DpdkIsSet = true;
}
bool PortDriver::dpdkIsSet() const
{
    return m_DpdkIsSet;
}
void PortDriver::unsetDpdk()
{
    m_DpdkIsSet = false;
}
std::shared_ptr<PortDriver_host> PortDriver::getHost() const
{
    return m_Host;
}
void PortDriver::setHost(std::shared_ptr<PortDriver_host> value)
{
    m_Host = value;
    m_HostIsSet = true;
}
bool PortDriver::hostIsSet() const
{
    return m_HostIsSet;
}
void PortDriver::unsetHost()
{
    m_HostIsSet = false;
}
std::shared_ptr<PortDriver_bond> PortDriver::getBond() const
{
    return m_Bond;
}
void PortDriver::setBond(std::shared_ptr<PortDriver_bond> value)
{
    m_Bond = value;
    m_BondIsSet = true;
}
bool PortDriver::bondIsSet() const
{
    return m_BondIsSet;
}
void PortDriver::unsetBond()
{
    m_BondIsSet = false;
}

}
}
}

