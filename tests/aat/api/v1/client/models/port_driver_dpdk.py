# coding: utf-8

"""
    Inception Core API

    REST API interface to the Inception Core  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortDriverDpdk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driver_name': 'str',
        'pci_address': 'str',
        'min_rx_buffer_size': 'int',
        'max_rx_packet_length': 'int',
        'max_rx_queues': 'int',
        'max_tx_queues': 'int',
        'max_mac_addresses': 'int',
        'rx_offloads': 'list[str]',
        'tx_offloads': 'list[str]'
    }

    attribute_map = {
        'driver_name': 'driver_name',
        'pci_address': 'pci_address',
        'min_rx_buffer_size': 'min_rx_buffer_size',
        'max_rx_packet_length': 'max_rx_packet_length',
        'max_rx_queues': 'max_rx_queues',
        'max_tx_queues': 'max_tx_queues',
        'max_mac_addresses': 'max_mac_addresses',
        'rx_offloads': 'rx_offloads',
        'tx_offloads': 'tx_offloads'
    }

    def __init__(self, driver_name=None, pci_address=None, min_rx_buffer_size=None, max_rx_packet_length=None, max_rx_queues=None, max_tx_queues=None, max_mac_addresses=None, rx_offloads=None, tx_offloads=None):  # noqa: E501
        """PortDriverDpdk - a model defined in Swagger"""  # noqa: E501

        self._driver_name = None
        self._pci_address = None
        self._min_rx_buffer_size = None
        self._max_rx_packet_length = None
        self._max_rx_queues = None
        self._max_tx_queues = None
        self._max_mac_addresses = None
        self._rx_offloads = None
        self._tx_offloads = None
        self.discriminator = None

        self.driver_name = driver_name
        self.pci_address = pci_address
        self.min_rx_buffer_size = min_rx_buffer_size
        self.max_rx_packet_length = max_rx_packet_length
        self.max_rx_queues = max_rx_queues
        self.max_tx_queues = max_tx_queues
        self.max_mac_addresses = max_mac_addresses
        self.rx_offloads = rx_offloads
        self.tx_offloads = tx_offloads

    @property
    def driver_name(self):
        """Gets the driver_name of this PortDriverDpdk.  # noqa: E501

        Port driver name  # noqa: E501

        :return: The driver_name of this PortDriverDpdk.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this PortDriverDpdk.

        Port driver name  # noqa: E501

        :param driver_name: The driver_name of this PortDriverDpdk.  # noqa: E501
        :type: str
        """
        if driver_name is None:
            raise ValueError("Invalid value for `driver_name`, must not be `None`")  # noqa: E501

        self._driver_name = driver_name

    @property
    def pci_address(self):
        """Gets the pci_address of this PortDriverDpdk.  # noqa: E501

        PCI address of port hardware  # noqa: E501

        :return: The pci_address of this PortDriverDpdk.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this PortDriverDpdk.

        PCI address of port hardware  # noqa: E501

        :param pci_address: The pci_address of this PortDriverDpdk.  # noqa: E501
        :type: str
        """
        if pci_address is None:
            raise ValueError("Invalid value for `pci_address`, must not be `None`")  # noqa: E501

        self._pci_address = pci_address

    @property
    def min_rx_buffer_size(self):
        """Gets the min_rx_buffer_size of this PortDriverDpdk.  # noqa: E501

        Minimum receive buffer size  # noqa: E501

        :return: The min_rx_buffer_size of this PortDriverDpdk.  # noqa: E501
        :rtype: int
        """
        return self._min_rx_buffer_size

    @min_rx_buffer_size.setter
    def min_rx_buffer_size(self, min_rx_buffer_size):
        """Sets the min_rx_buffer_size of this PortDriverDpdk.

        Minimum receive buffer size  # noqa: E501

        :param min_rx_buffer_size: The min_rx_buffer_size of this PortDriverDpdk.  # noqa: E501
        :type: int
        """
        if min_rx_buffer_size is None:
            raise ValueError("Invalid value for `min_rx_buffer_size`, must not be `None`")  # noqa: E501

        self._min_rx_buffer_size = min_rx_buffer_size

    @property
    def max_rx_packet_length(self):
        """Gets the max_rx_packet_length of this PortDriverDpdk.  # noqa: E501

        Minimum receive packet length  # noqa: E501

        :return: The max_rx_packet_length of this PortDriverDpdk.  # noqa: E501
        :rtype: int
        """
        return self._max_rx_packet_length

    @max_rx_packet_length.setter
    def max_rx_packet_length(self, max_rx_packet_length):
        """Sets the max_rx_packet_length of this PortDriverDpdk.

        Minimum receive packet length  # noqa: E501

        :param max_rx_packet_length: The max_rx_packet_length of this PortDriverDpdk.  # noqa: E501
        :type: int
        """
        if max_rx_packet_length is None:
            raise ValueError("Invalid value for `max_rx_packet_length`, must not be `None`")  # noqa: E501

        self._max_rx_packet_length = max_rx_packet_length

    @property
    def max_rx_queues(self):
        """Gets the max_rx_queues of this PortDriverDpdk.  # noqa: E501

        Maximum receive queues  # noqa: E501

        :return: The max_rx_queues of this PortDriverDpdk.  # noqa: E501
        :rtype: int
        """
        return self._max_rx_queues

    @max_rx_queues.setter
    def max_rx_queues(self, max_rx_queues):
        """Sets the max_rx_queues of this PortDriverDpdk.

        Maximum receive queues  # noqa: E501

        :param max_rx_queues: The max_rx_queues of this PortDriverDpdk.  # noqa: E501
        :type: int
        """
        if max_rx_queues is None:
            raise ValueError("Invalid value for `max_rx_queues`, must not be `None`")  # noqa: E501

        self._max_rx_queues = max_rx_queues

    @property
    def max_tx_queues(self):
        """Gets the max_tx_queues of this PortDriverDpdk.  # noqa: E501

        Maximum transmit queues  # noqa: E501

        :return: The max_tx_queues of this PortDriverDpdk.  # noqa: E501
        :rtype: int
        """
        return self._max_tx_queues

    @max_tx_queues.setter
    def max_tx_queues(self, max_tx_queues):
        """Sets the max_tx_queues of this PortDriverDpdk.

        Maximum transmit queues  # noqa: E501

        :param max_tx_queues: The max_tx_queues of this PortDriverDpdk.  # noqa: E501
        :type: int
        """
        if max_tx_queues is None:
            raise ValueError("Invalid value for `max_tx_queues`, must not be `None`")  # noqa: E501

        self._max_tx_queues = max_tx_queues

    @property
    def max_mac_addresses(self):
        """Gets the max_mac_addresses of this PortDriverDpdk.  # noqa: E501

        Maximum MAC addresses  # noqa: E501

        :return: The max_mac_addresses of this PortDriverDpdk.  # noqa: E501
        :rtype: int
        """
        return self._max_mac_addresses

    @max_mac_addresses.setter
    def max_mac_addresses(self, max_mac_addresses):
        """Sets the max_mac_addresses of this PortDriverDpdk.

        Maximum MAC addresses  # noqa: E501

        :param max_mac_addresses: The max_mac_addresses of this PortDriverDpdk.  # noqa: E501
        :type: int
        """
        if max_mac_addresses is None:
            raise ValueError("Invalid value for `max_mac_addresses`, must not be `None`")  # noqa: E501

        self._max_mac_addresses = max_mac_addresses

    @property
    def rx_offloads(self):
        """Gets the rx_offloads of this PortDriverDpdk.  # noqa: E501

        Available receive-side offloads  # noqa: E501

        :return: The rx_offloads of this PortDriverDpdk.  # noqa: E501
        :rtype: list[str]
        """
        return self._rx_offloads

    @rx_offloads.setter
    def rx_offloads(self, rx_offloads):
        """Sets the rx_offloads of this PortDriverDpdk.

        Available receive-side offloads  # noqa: E501

        :param rx_offloads: The rx_offloads of this PortDriverDpdk.  # noqa: E501
        :type: list[str]
        """
        if rx_offloads is None:
            raise ValueError("Invalid value for `rx_offloads`, must not be `None`")  # noqa: E501

        self._rx_offloads = rx_offloads

    @property
    def tx_offloads(self):
        """Gets the tx_offloads of this PortDriverDpdk.  # noqa: E501

        Available transmit-side offloads  # noqa: E501

        :return: The tx_offloads of this PortDriverDpdk.  # noqa: E501
        :rtype: list[str]
        """
        return self._tx_offloads

    @tx_offloads.setter
    def tx_offloads(self, tx_offloads):
        """Sets the tx_offloads of this PortDriverDpdk.

        Available transmit-side offloads  # noqa: E501

        :param tx_offloads: The tx_offloads of this PortDriverDpdk.  # noqa: E501
        :type: list[str]
        """
        if tx_offloads is None:
            raise ValueError("Invalid value for `tx_offloads`, must not be `None`")  # noqa: E501

        self._tx_offloads = tx_offloads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortDriverDpdk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
