# coding: utf-8

"""
    Inception Core API

    REST API interface to the Inception Core  # noqa: E501

    OpenAPI spec version: 1
    Contact: support@spirent.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from client.models.interface_config import InterfaceConfig  # noqa: F401,E501
from client.models.interface_stats import InterfaceStats  # noqa: F401,E501


class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'config': 'InterfaceConfig',
        'stats': 'InterfaceStats'
    }

    attribute_map = {
        'id': 'id',
        'config': 'config',
        'stats': 'stats'
    }

    def __init__(self, id=None, config=None, stats=None):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._config = None
        self._stats = None
        self.discriminator = None

        self.id = id
        self.config = config
        self.stats = stats

    @property
    def id(self):
        """Gets the id of this Interface.  # noqa: E501

        Unique interface identifier  # noqa: E501

        :return: The id of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Interface.

        Unique interface identifier  # noqa: E501

        :param id: The id of this Interface.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def config(self):
        """Gets the config of this Interface.  # noqa: E501


        :return: The config of this Interface.  # noqa: E501
        :rtype: InterfaceConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Interface.


        :param config: The config of this Interface.  # noqa: E501
        :type: InterfaceConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def stats(self):
        """Gets the stats of this Interface.  # noqa: E501


        :return: The stats of this Interface.  # noqa: E501
        :rtype: InterfaceStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Interface.


        :param stats: The stats of this Interface.  # noqa: E501
        :type: InterfaceStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
