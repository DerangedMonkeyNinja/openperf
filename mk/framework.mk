#
# Makefile component for inception framework
#

FW_REQ_VARS := \
	ICP_ROOT \
	ICP_BUILD_ROOT \
	FW_MODULES
$(call icp_check_vars,$(ICP_REQ_VARS))

FW_SRC_DIR := $(ICP_ROOT)/src/framework
FW_OBJ_DIR := $(ICP_BUILD_ROOT)/obj/framework
FW_INC_DIR := $(ICP_ROOT)/src/framework
FW_LIB_DIR := $(ICP_BUILD_ROOT)/framework

# We explicitly state our includes, e.g. include module/<header.h>
ICP_INC_DIRS += $(FW_INC_DIR)
ICP_LIB_DIRS += $(FW_LIB_DIR)

FW_SOURCES :=
FW_OBJECTS :=
FW_DEPENDS :=
FW_LDLIBS  :=

FW_MODULES := core

# Load each module's module.mk file
include $(patsubst %, $(FW_SRC_DIR)/%/module.mk, $(FW_MODULES))

# Generate a list of object files from the FW_SOURCES variable
# and translate the path from the SRC to the BUILD directory
FW_OBJECTS += $(patsubst %, $(FW_OBJ_DIR)/%, \
	$(patsubst %.c, %.o, $(filter %.c, $(FW_SOURCES))))

###
# Pull in dependencies, maybe...
# Hopefully, these are generated by the compiler
###
-include $(FW_OBJECTS:.o=.d)

# Update library build options before loading dependencies. That way
# archive ordering should be correct.
ICP_LDLIBS += -Wl,--whole-archive -lframework -Wl,--no-whole-archive $(FW_LDLIBS)

# Load external dependencies, too
$(foreach DEP, $(FW_DEPENDS), $(eval include $(ICP_ROOT)/mk/$(DEP).mk))

###
# Build rules
###
$(FW_OBJECTS): | $(FW_DEPENDS)

$(FW_OBJ_DIR)/%.o: $(FW_SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(strip $(ICP_CC) -o $@ -c $(ICP_CPPFLAGS) $(ICP_CFLAGS) $(ICP_COPTS) $(ICP_DEFINES) $<)

$(FW_LIB_DIR)/libframework.a: $(FW_OBJECTS)
	@mkdir -p $(dir $@)
	$(strip $(ICP_AR) $(ICP_ARFLAGS) $@ $(FW_OBJECTS))

.PHONY: framework
framework: $(FW_LIB_DIR)/libframework.a

.PHONY: clean_framework
clean_framework:
	@rm -rf $(FW_OBJ_DIR) $(FW_LIB_DIR)
clean: clean_framework
